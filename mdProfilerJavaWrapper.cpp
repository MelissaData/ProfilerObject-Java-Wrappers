/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(GetUserName)
  #undef GetUserName
#endif
#include "mdProfiler.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ErrorNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProgramStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProgramStatus)mdProfiler::ErrorNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1Append_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::AppendMode result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::AppendMode)mdProfiler::Append;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeInt1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeInt1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeInt2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeInt2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeInt4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeInt4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeInt8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeInt8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeUInt1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeUInt1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeUInt2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeUInt2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeUInt4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeUInt4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeUInt8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeUInt8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeReal4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeReal4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeReal8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeReal8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeNumeric_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeNumeric;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDecimal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDecimal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeCurrency_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeCurrency;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeFixedMBCSString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeFixedMBCSString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeVariableMBCSString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeVariableMBCSString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeFixedUnicodeString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeFixedUnicodeString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeVariableUnicodeString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeVariableUnicodeString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBDate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBDate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBTime2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBTime2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBTimeStamp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBTimeStamp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBTimeStamp2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBTimeStamp2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeDBTimeStampOffset_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeDBTimeStampOffset;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeFileTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeFileTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeBoolean_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeBoolean;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeGUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeGUID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeBytes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeBytes;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ColumnTypeImage_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerColumnType)mdProfiler::ColumnTypeImage;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeFullName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeFullName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeInverseName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeInverseName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeNamePrefix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeNamePrefix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeFirstName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeFirstName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeMiddleName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeMiddleName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeLastName_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeLastName;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeNameSuffix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeNameSuffix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeTitle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeTitle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeCompany_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeCompany;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeAddress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeAddress;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeCity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeCity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeStateOrProvince_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeStateOrProvince;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeZipOrPostalCode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeZipOrPostalCode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeCityStateZip_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeCityStateZip;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeCountry_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeCountry;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypePhone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypePhone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeEmail_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeEmail;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeNumeric_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeNumeric;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeDateMDY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeDateMDY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeDateYMD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeDateYMD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeDateDMY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeDateDMY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DataTypeBoolean_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::ProfilerDataType)mdProfiler::DataTypeBoolean;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortUnknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortStringAscending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortStringAscending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortStringDescending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortStringDescending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortNumericAscending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortNumericAscending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortNumericDescending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortNumericDescending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortDateAscending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortDateAscending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SortDateDescending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Sortation)mdProfiler::SortDateDescending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1OrderNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Order result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Order)mdProfiler::OrderNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1OrderValueAscending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Order result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Order)mdProfiler::OrderValueAscending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1OrderValueDescending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Order result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Order)mdProfiler::OrderValueDescending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1OrderCountAscending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Order result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Order)mdProfiler::OrderCountAscending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1OrderCountDescending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::Order result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::Order)mdProfiler::OrderCountDescending;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanDate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanDate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanHour_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanHour;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanMinute_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanMinute;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanSecond_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanSecond;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanMillisecond_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanMillisecond;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanDayOfWeek_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanDayOfWeek;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanDay_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanDay;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanWeek_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanWeek;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanMonth_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanMonth;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanQuarter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanQuarter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanYear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanYear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanDecade_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanDecade;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1DateSpanCentury_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mdProfiler::DateSpan result;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler::DateSpan)mdProfiler::DateSpanCentury;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_new_1mdProfiler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mdProfiler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mdProfiler *)new mdProfiler();
  *(mdProfiler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_delete_1mdProfiler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mdProfiler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetLicenseString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->SetLicenseString((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetPathToProfilerDataFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetPathToProfilerDataFiles((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetFileName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetAppendMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  mdProfiler::AppendMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (mdProfiler::AppendMode)jarg2; 
  (arg1)->SetAppendMode(arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetUserName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetUserName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetUserName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetUserName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetTableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetTableName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetTableName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetJobName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetJobName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetJobDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetJobDescription((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetJobDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetJobDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetSortAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSortAnalysis(arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetMatchUpAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMatchUpAnalysis(arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetRightFielderAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRightFielderAnalysis(arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetDataAggregation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDataAggregation(arg2);
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1InitializeDataFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  mdProfiler::ProgramStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (mdProfiler::ProgramStatus)(arg1)->InitializeDataFiles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetInitializeErrorString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetInitializeErrorString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetBuildNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetBuildNumber();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDatabaseDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetDatabaseDate();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetLicenseExpirationDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetLicenseExpirationDate();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetProfileStartDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetProfileStartDateTime();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetProfileEndDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetProfileEndDateTime();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTypeEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetColumnTypeEnum();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTypeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  mdProfiler::ProfilerColumnType arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (mdProfiler::ProfilerColumnType)jarg2; 
  result = (char *)(arg1)->GetColumnTypeDescription(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ParseColumnTypeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerColumnType)(arg1)->ParseColumnTypeDescription((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDataTypeEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetDataTypeEnum();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDataTypeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  mdProfiler::ProfilerDataType arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (mdProfiler::ProfilerDataType)jarg2; 
  result = (char *)(arg1)->GetDataTypeDescription(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ParseDataTypeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerDataType)(arg1)->ParseDataTypeDescription((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetResultCodeEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (char *)(arg1)->GetResultCodeEnum();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetResultCodeDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetResultCodeDescription((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1AddColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerColumnType arg3 ;
  mdProfiler::ProfilerDataType arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (mdProfiler::ProfilerColumnType)jarg3; 
  arg4 = (mdProfiler::ProfilerDataType)jarg4; 
  (arg1)->AddColumn((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnCustomPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->SetColumnCustomPattern((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnValueRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (int)(arg1)->SetColumnValueRange((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->SetColumnDefaultValue((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->SetColumnSize((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->SetColumnPrecision((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->SetColumnScale((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnIgnoreOnError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->SetColumnIgnoreOnError((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartProfiling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  (arg1)->StartProfiling();
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->SetColumn((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetColumnNull((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1AddRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  (arg1)->AddRecord();
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetResults((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetTextQualifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetTextQualifier((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetColumnDelimiter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetColumnDelimiter((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetRowDelimiter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetRowDelimiter((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1AddDelimitedRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->AddDelimitedRecord((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1ProfileData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  (arg1)->ProfileData();
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableRecordCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableRecordCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableRecordEmptyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableRecordEmptyCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableRecordNullCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableRecordNullCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableEmbeddedRowDelimiterCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableEmbeddedRowDelimiterCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableNotAllFieldsPresentCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableNotAllFieldsPresentCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableExtraFieldsPresentCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableExtraFieldsPresentCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableUnbalancedTextQualifiersCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableUnbalancedTextQualifiersCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableUnescapedEmbeddedTextQualifiersCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableUnescapedEmbeddedTextQualifiersCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableExactMatchDistinctCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableExactMatchDistinctCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableExactMatchDupesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableExactMatchDupesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableExactMatchLargestGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableExactMatchLargestGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableContactMatchDistinctCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableContactMatchDistinctCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableContactMatchDupesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableContactMatchDupesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableContactMatchLargestGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableContactMatchLargestGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableHouseholdMatchDistinctCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableHouseholdMatchDistinctCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableHouseholdMatchDupesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableHouseholdMatchDupesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableHouseholdMatchLargestGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableHouseholdMatchLargestGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableAddressMatchDistinctCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableAddressMatchDistinctCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableAddressMatchDupesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableAddressMatchDupesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetTableAddressMatchLargestGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetTableAddressMatchLargestGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  result = (int)(arg1)->GetColumnCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetColumnName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerColumnType)(arg1)->GetColumnColumnType((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerDataType)(arg1)->GetColumnDataType((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnSize((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnPrecision((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnScale((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnValueRangeFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnValueRangeFrom((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnValueRangeTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnValueRangeTo((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDefaultValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnCustomPatterns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnCustomPatterns((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInferredDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerDataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerDataType)(arg1)->GetColumnInferredDataType((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInferredColumnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::ProfilerColumnType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::ProfilerColumnType)(arg1)->GetColumnInferredColumnType((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnSortation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Sortation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mdProfiler::Sortation)(arg1)->GetColumnSortation((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnSortationPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnSortationPercent((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMostPopularCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMostPopularCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDistinctCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnDistinctCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnUniqueCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnUniqueCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDefaultValueCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnDefaultValueCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnBelowRangeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnBelowRangeCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAboveRangeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAboveRangeCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAboveSizeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAboveSizeCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAbovePrecisionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAbovePrecisionCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAboveScaleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAboveScaleCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInvalidRegExCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnInvalidRegExCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmptyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmptyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNullCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNullCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInvalidDataCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnInvalidDataCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInvalidUTF8Count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnInvalidUTF8Count((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNonPrintingCharCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNonPrintingCharCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDiacriticCharCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnDiacriticCharCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnForeignCharCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnForeignCharCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAlphaOnlyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAlphaOnlyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericOnlyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNumericOnlyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAlphaNumericCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnAlphaNumericCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnUpperCaseOnlyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnUpperCaseOnlyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnLowerCaseOnlyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnLowerCaseOnlyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMixedCaseCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMixedCaseCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnSingleSpaceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnSingleSpaceCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMultiSpaceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMultiSpaceCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnLeadingSpaceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnLeadingSpaceCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTrailingSpaceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnTrailingSpaceCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMaxSpaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMaxSpaces((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMinSpaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMinSpaces((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTotalSpaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnTotalSpaces((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTotalWordBreaks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnTotalWordBreaks((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAvgSpaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnAvgSpaces((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDecorationCharCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnDecorationCharCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnProfanityCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnProfanityCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnInconsistentDataCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnInconsistentDataCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnStringMaxValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnStringMinValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringQ1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnStringQ1Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnStringMedValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringQ3Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnStringQ3Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStringMaxLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMinLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStringMinLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringAvgLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnStringAvgLength((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringQ1Length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStringQ1Length((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringMedLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStringMedLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStringQ3Length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStringQ3Length((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnWordMaxValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnWordMinValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordQ1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnWordQ1Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnWordMedValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordQ3Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnWordQ3Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnWordMaxLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMinLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnWordMinLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordAvgLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnWordAvgLength((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordQ1Length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnWordQ1Length((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordMedLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnWordMedLength((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnWordQ3Length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnWordQ3Length((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMaxWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMaxWords((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnMinWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnMinWords((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnAvgWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnAvgWords((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericMaxValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericMinValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericAvgValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericAvgValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericQ1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericQ1Value((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericQ1IntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericQ1IntValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericMedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericMedValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericMedIntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericMedIntValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericQ3Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericQ3Value((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericQ3IntValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericQ3IntValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNumericStdDevValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->GetColumnNumericStdDevValue((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateMaxValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateMinValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateAvgValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateAvgValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateQ1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateQ1Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateMedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateMedValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateQ3Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnDateQ3Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeMaxValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeMinValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeAvgValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeAvgValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeQ1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeQ1Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeMedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeMedValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnTimeQ3Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetColumnTimeQ3Value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnDateNoCenturyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnDateNoCenturyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNameInconsistentOrderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNameInconsistentOrderCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNameMultipleNameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNameMultipleNameCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnNameSuspiciousNameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnNameSuspiciousNameCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStateCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStateCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnProvinceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnProvinceCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStateProvinceNonStandardCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStateProvinceNonStandardCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStateProvinceInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStateProvinceInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnZipCodeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnZipCodeCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnPlus4Count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnPlus4Count((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnZipCodeInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnZipCodeInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnPostalCodeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnPostalCodeCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnPostalCodeInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnPostalCodeInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnZipCodePostalCodeInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnZipCodePostalCodeInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnStateZipCodeMismatchCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnStateZipCodeMismatchCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnProvincePostalCodeMismatchCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnProvincePostalCodeMismatchCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnCountryNonStandardCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnCountryNonStandardCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnCountryInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnCountryInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmailSyntaxCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmailSyntaxCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmailMobileDomainCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmailMobileDomainCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmailMisspelledDomainCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmailMisspelledDomainCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmailSpamtrapDomainCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmailSpamtrapDomainCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnEmailDisposableDomainCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnEmailDisposableDomainCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetColumnPhoneInvalidCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetColumnPhoneInvalidCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartDataFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartDataFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDataFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetDataFrequencyValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDataFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetDataFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextDataFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextDataFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartLengthFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartLengthFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetLengthFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetLengthFrequencyValue((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetLengthFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetLengthFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextLengthFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextLengthFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartPatternFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartPatternFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetPatternFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetPatternFrequencyValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetPatternFrequencyRegEx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetPatternFrequencyRegEx((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetPatternFrequencyExample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetPatternFrequencyExample((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetPatternFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetPatternFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextPatternFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextPatternFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartDateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  mdProfiler::DateSpan arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  arg4 = (mdProfiler::DateSpan)jarg4; 
  result = (int)(arg1)->StartDateFrequency((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDateFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetDateFrequencyValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetDateFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetDateFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextDateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextDateFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartSoundExFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartSoundExFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetSoundExFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetSoundExFrequencyValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetSoundExFrequencyExample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetSoundExFrequencyExample((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetSoundExFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetSoundExFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextSoundExFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextSoundExFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartWordFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartWordFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetWordFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetWordFrequencyValue((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetWordFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetWordFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextWordFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextWordFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1StartWordLengthFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  mdProfiler::Order arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (mdProfiler::Order)jarg3; 
  result = (int)(arg1)->StartWordLengthFrequency((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetWordLengthFrequencyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetWordLengthFrequencyValue((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetWordLengthFrequencyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetWordLengthFrequencyCount((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetNextWordLengthFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetNextWordLengthFrequency((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1SetReserved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->SetReserved((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_com_melissadata_mdProfilerJavaWrapperJNI_mdProfiler_1GetReserved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mdProfiler *arg1 = (mdProfiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mdProfiler **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->GetReserved((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


#ifdef __cplusplus
}
#endif

